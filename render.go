package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/hwaf/hwaf/hlib"
)

type Renderer struct {
	req *ReqFile
	w   *os.File
	pkg hlib.Wscript_t
}

func NewRenderer(req *ReqFile) (*Renderer, error) {
	var err error
	var r *Renderer

	r = &Renderer{req: req, pkg: req.Wscript}
	return r, err
}

func (r *Renderer) Render() error {
	var err error

	err = r.render()
	if err != nil {
		return err
	}
	return err
}

func (r *Renderer) render() error {
	var err error
	pkgdir := filepath.Dir(filepath.Dir(r.req.Filename))
	fname := ""
	render := r.render_hscript
	fname = filepath.Join(pkgdir, "hscript.yml")

	if path_exists(fname) {
		f, err := os.Open(fname)
		if err == nil {
			buf := make([]byte, 64)
			f.Read(buf)
			if !bytes.HasPrefix(buf, []byte(`## automatically generated by`)) {
				// user generated file.
				// keep it.
				fmt.Printf("**warning** file [%s] already present\n", fname)
				return nil
			}
		}
	}

	r.w, err = os.Create(fname)
	if err != nil {
		return err
	}
	defer func() {
		r.w.Sync()
		r.w.Close()
	}()

	err = render()
	return err
}

func render_script(req *ReqFile) error {
	var err error

	renderer, err := NewRenderer(req)
	if err != nil {
		return err
	}

	err = renderer.Render()
	if err != nil {
		return err
	}

	return err
}

func sanitize_srcs(sources []string) (srcs []string, rest []string) {
	srcs = make([]string, 0, len(sources))
	rest = make([]string, 0)
	for _, src := range sources {
		if strings.HasPrefix(src, "../") {
			src = src[len("../"):]
		}
		if strings.HasPrefix(src, "-") {
			// discard -globals -no_prototypes -s=$(some)/src
			rest = append(rest, src)
			continue
		}
		srcs = append(srcs, src)
	}
	return srcs, rest
}

func sanitize_env_string(v string) string {
	v = strings.Replace(v, "$(", "${", -1)
	v = strings.Replace(v, ")", "}", -1)
	if strings.HasPrefix(v, `"`) {
		v = v[1:]
	}
	if strings.HasSuffix(v, `"`) {
		v = v[0 : len(v)-1]
	}
	return v
}

func sanitize_env_strings(v []string) string {
	o := make([]string, 0, len(v))
	for _, vv := range v {
		vv = sanitize_env_string(vv)
		o = append(o, vv)
	}
	return strings.Join(o, " ")
}

// EOF
